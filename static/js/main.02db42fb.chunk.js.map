{"version":3,"sources":["data/DataModel.ts","components/Editor.tsx","components/Login.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DBConfig","onEditorsAdd","newEditorRef","ref","push","set","data","content","title","render","visible","fold","id","key","onSingleEditorChange","path","onEditorDataContentChange","val","onEditorDataTitleChange","onEditorRenderFoldChange","onEditorRenderVisibleChange","useStyles","makeStyles","theme","root","margin","spacing","control","Editor","onTitleChange","onToggleFold","onFocus","onChange","classes","className","Grid","container","item","xs","TextField","label","fullWidth","variant","value","event","target","justify","Button","size","color","onClick","_event","console","log","multiline","width","buttonRoot","marginTop","Login","useState","email","_setEmail","password","_setPassword","type","signInWithEmailAndPassword","catch","e","message","formControl","gridControl","position","top","padding","backgroundColor","controlRoot","controlButton","gridRoot","gridPaper","paddingRight","BlockGrid","React","numColumns","_setNumColumns","editorData","setEditorData","useEffect","setState","on","snap","fbValues","values","Object","err","error","columns","i","filter","x","forEach","idx","colXs","columnComponents","map","Paper","direction","FormControl","InputLabel","Select","MenuItem","App","isLogined","setIsLogined","onAuthStateChanged","fbUser","Fragment","AppBar","Toolbar","signOut","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02db42fb.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB6qzZOmdGdmgvmMy_nhbQAnTSEmzvAhOk\",\n  authDomain: \"note-mgmt-v0.firebaseapp.com\",\n  databaseURL: \"https://note-mgmt-v0.firebaseio.com\",\n  projectId: \"note-mgmt-v0\",\n  storageBucket: \"note-mgmt-v0.appspot.com\",\n  messagingSenderId: \"50994080053\",\n  appId: \"1:50994080053:web:6282c01defb385f9e2847c\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst DBConfig = {\n  basePath: \"test/editors\",\n};\nexport type EditorDataType = {\n  content: string;\n  title: string;\n};\nexport type EditorRenderType = {\n  visible: boolean;\n  fold: boolean;\n};\n\nexport type EditorType = {\n  data: EditorDataType;\n  render: EditorRenderType;\n  id: string;\n};\n\nexport type EditorListType = EditorType[];\ntype EditorMapType = {\n  [index: string]: EditorType;\n};\nconst onEditorsAdd = () => {\n  const newEditorRef = firebase.database().ref(DBConfig.basePath).push();\n  newEditorRef.set({\n    data: {\n      content: \"\",\n      title: \"\",\n    },\n    render: {\n      visible: true,\n      fold: false,\n    },\n    id: newEditorRef.key,\n  } as EditorType);\n};\nconst onSingleEditorChange: (\n  id: string,\n  path: string\n) => firebase.database.Reference = (id: string, path: string) => {\n  return firebase.database().ref(DBConfig.basePath + \"/\" + id + \"/\" + path);\n};\nconst onEditorDataContentChange = (val: string, id: string) => {\n  onSingleEditorChange(id, \"data/content\").set(val);\n};\nconst onEditorDataTitleChange = (val: string, id: string) => {\n  onSingleEditorChange(id, \"data/title\").set(val);\n};\nconst onEditorRenderFoldChange = (val: boolean, id: string) => {\n  onSingleEditorChange(id, \"render/fold\").set(val);\n};\nconst onEditorRenderVisibleChange = (val: boolean, id: string) => {\n  onSingleEditorChange(id, \"render/visible\").set(val);\n};\n\ntype SetStateEditorsData = React.Dispatch<React.SetStateAction<EditorListType>>;\nconst subscribeEditorsValueChange = (setState: SetStateEditorsData) => {\n  const databaseRef = firebase.database().ref(DBConfig.basePath);\n  databaseRef.on(\n    \"value\",\n    (snap) => {\n      const fbValues = snap.val() as EditorMapType | null;\n      if (fbValues == null) {\n        // if new DB instance, bootstrap w/ 1 object\n        onEditorsAdd();\n        return;\n      }\n      console.log(\"[subscribe] firebase value \");\n      // no sorting for now\n      const values = Object.values(fbValues);\n      console.log(values);\n      setState(values);\n    },\n    (err: Error) => {\n      console.error(err.message);\n      console.error(err);\n    }\n  );\n};\nexport {\n  onEditorsAdd,\n  onEditorDataContentChange,\n  onEditorDataTitleChange,\n  onEditorRenderFoldChange,\n  onEditorRenderVisibleChange,\n  subscribeEditorsValueChange,\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n    },\n  },\n  control: {},\n}));\n\ntype EditorProps = {\n  id: string;\n  content: string;\n  onChange: (value: string, id: string) => void;\n  title: string;\n  onTitleChange: (value: string, id: string) => void;\n  fold: boolean;\n  onToggleFold: (val: boolean, id: string) => void;\n  onFocus: (val: boolean, id: string) => void;\n};\nconst Editor = ({\n  id,\n  content,\n  title,\n  onTitleChange,\n  fold,\n  onToggleFold,\n  onFocus,\n  onChange,\n}: EditorProps) => {\n  const classes = useStyles();\n  const onTitleChangeWrapper = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onTitleChange(event.target.value, id);\n  };\n  const onChangeWrapper = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"onChangeWrapper\");\n    onChange(event.target.value, id);\n  };\n  const onToggleWrapper = (_event: React.MouseEvent) => {\n    console.log(\"onToggleWrapper\");\n    onToggleFold(!fold, id);\n  };\n  const onFocusWrapper = (_event: React.MouseEvent) => {\n    console.log(\"onFocusWrapper\");\n    onFocus(true, id);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid className={classes.control} container spacing={3}>\n        <Grid item xs={6}>\n          {/* Editor title */}\n          <TextField\n            label=\"title\"\n            fullWidth={true}\n            variant=\"standard\"\n            value={title}\n            onChange={onTitleChangeWrapper}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          {/* Editor control */}\n          <Grid container spacing={3} justify={\"flex-end\"}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                onClick={onToggleWrapper}\n              >\n                Show/Hide\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                onClick={onFocusWrapper}\n              >\n                Focus\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* Editor input area */}\n      {fold ? null : (\n        <TextField\n          multiline\n          label=\"thoughts\"\n          value={content}\n          onChange={onChangeWrapper}\n          variant=\"outlined\"\n          fullWidth={true}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport * as firebase from \"firebase\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"auto\",\n    width: \"70%\",\n  },\n  buttonRoot: {\n    marginTop: \"2px\",\n  },\n}));\nconst Login = () => {\n  const classes = useStyles();\n\n  const [email, _setEmail] = useState(\"\");\n  const setEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    _setEmail(event.target.value as string);\n  };\n  const [password, _setPassword] = useState(\"\");\n  const setPassword = (event: React.ChangeEvent<HTMLInputElement>) => {\n    _setPassword(event.target.value as string);\n  };\n  const onLogin = (_event: React.MouseEvent) => {\n    const auth = firebase.auth();\n    const promise = auth.signInWithEmailAndPassword(email, password);\n    promise.catch((e) => {\n      console.log(e.message);\n    });\n  };\n  return (\n    <div className={classes.root}>\n      <TextField\n        label=\"Email\"\n        value={email}\n        fullWidth={true}\n        variant=\"standard\"\n        onChange={setEmail}\n      />\n      <TextField\n        label=\"Password\"\n        fullWidth={true}\n        value={password}\n        variant=\"standard\"\n        onChange={setPassword}\n        type=\"password\"\n      />\n      <Grid container className={classes.buttonRoot} spacing={1}>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={onLogin}>\n            Login\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\">\n            Sign up (dead)\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  EditorType,\n  EditorListType,\n  onEditorsAdd,\n  onEditorRenderVisibleChange,\n  onEditorDataContentChange,\n  onEditorDataTitleChange,\n  onEditorRenderFoldChange,\n  subscribeEditorsValueChange,\n} from \"../data/DataModel\";\nimport Editor from \"./Editor\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Login from \"./Login\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport * as firebase from \"firebase\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"90%\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"100%\",\n  },\n  gridControl: {\n    position: \"sticky\",\n    top: \"10px\",\n    margin: \"20px\",\n    padding: \"10px\",\n    backgroundColor: \"#eaedf0\",\n  },\n  controlRoot: {\n    margin: \"20px\",\n    padding: \"10px\",\n    backgroundColor: \"#eaedf0\",\n  },\n  controlButton: {\n    margin: \"10px\",\n  },\n  gridRoot: {\n    margin: \"20px\",\n    padding: \"10px\",\n    backgroundColor: \"#d6e9fe\",\n  },\n  gridPaper: {\n    padding: theme.spacing(2),\n    paddingRight: theme.spacing(4),\n  },\n}));\n\nconst BlockGrid = () => {\n  const classes = useStyles();\n  // state: columns\n  const [numColumns, _setNumColumns] = React.useState(1);\n  const setNumColumns = (event: React.ChangeEvent<{ value: unknown }>) => {\n    _setNumColumns(event.target.value as number);\n  };\n\n  // state: editor data\n  const [editorData, setEditorData] = React.useState([] as EditorListType);\n  // fetch data on load\n  useEffect(\n    () => {\n      console.log(\"useEffect\");\n      // sync\n      subscribeEditorsValueChange(setEditorData);\n    },\n    [] // only run on mount & unmount\n  );\n\n  // create blockGrid data\n  const columns: object[][] = [];\n  for (let i = 0; i < numColumns; i++) {\n    columns.push([]);\n  }\n  editorData\n    .filter((x: EditorType) => x.render.visible)\n    .forEach((x: EditorType, idx: number) => {\n      const colIndex = idx % numColumns;\n      columns[colIndex].push(\n        <Grid key={idx} item>\n          <Editor\n            id={x.id}\n            {...x.data}\n            {...x.render}\n            onFocus={onEditorRenderVisibleChange}\n            onToggleFold={onEditorRenderFoldChange}\n            onTitleChange={onEditorDataTitleChange}\n            onChange={onEditorDataContentChange}\n          />\n        </Grid>\n      );\n    });\n  const colXs = numColumns === 1 ? 12 : 6;\n  const columnComponents = columns.map((x, idx) => {\n    return (\n      <Grid key={idx} item xs={colXs}>\n        <Paper className={classes.gridPaper}>\n          <Grid container direction=\"column\" justify=\"center\" spacing={2}>\n            {x}\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  });\n  return (\n    <div className={classes.root}>\n      {/* block controls */}\n      <Grid container className={classes.gridControl} spacing={2}>\n        <Grid item xs={3}>\n          <Button\n            className={classes.controlButton}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onEditorsAdd}\n          >\n            Add Editor\n          </Button>\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-label\">\n              Number of Columns\n            </InputLabel>\n            <Select value={numColumns} onChange={setNumColumns}>\n              <MenuItem value={1}>One</MenuItem>\n              <MenuItem value={2}>Two</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      {/* blocks */}\n      <Grid container className={classes.gridRoot} spacing={2}>\n        {columnComponents}\n      </Grid>\n    </div>\n  );\n};\n\nexport default function App() {\n  const [isLogined, setIsLogined] = useState(false);\n  firebase.auth().onAuthStateChanged((fbUser) => {\n    if (fbUser) {\n      // user is signed in\n      console.log(fbUser);\n      setIsLogined(true);\n    } else {\n      console.log(\"not logged in \");\n      setIsLogined(false);\n    }\n  });\n  const onLogout = (_event: React.MouseEvent) => {\n    console.log(\"signing out\");\n    firebase.auth().signOut();\n  };\n  return (\n    <React.Fragment>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Button color=\"inherit\" onClick={onLogout}>\n            Logout\n          </Button>\n        </Toolbar>\n      </AppBar>\n      {isLogined ? <BlockGrid /> : <Login />}\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}